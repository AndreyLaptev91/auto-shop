'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var fs = require('fs');
var path = require('path');
var url = require('url');

function buildManifest(compiler, compilation, ignoreChunkNames) {
  var context = compiler.options.context;
  var manifest = {};

  compilation.chunks.forEach(function (chunk) {
    // Determine if the chunk should be ignored
    var chunkName = typeof chunk.name === 'undefined' ? 'undefined' : chunk.name === null ? 'null' : chunk.name;
    var ignoreChunk = ignoreChunkNames.length === 0 ? false : ignoreChunkNames.some(function (chunkNameCondition) {
      if (chunkNameCondition instanceof RegExp) {
        chunkNameCondition.lastIndex = 0; // reset in-case its a global regexp
        return chunkNameCondition.test(chunkName);
      }

      return chunkNameCondition === chunkName;
    });

    if (!ignoreChunk) {
      chunk.files.forEach(function (file) {
        chunk.forEachModule(function (module) {
          var id = module.id;
          var name = typeof module.libIdent === 'function' ? module.libIdent({ context: context }) : null;
          var publicPath = url.resolve(compilation.outputOptions.publicPath || '', file);

          var currentModule = module;
          if (module.constructor.name === 'ConcatenatedModule') {
            currentModule = module.rootModule;
          }
          if (!manifest[currentModule.rawRequest]) {
            manifest[currentModule.rawRequest] = [];
          }

          manifest[currentModule.rawRequest].push({ id: id, name: name, file: file, publicPath: publicPath });
        });
      });
    }
  });

  return manifest;
}

var ReactChunkPlugin = function () {
  function ReactChunkPlugin() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, ReactChunkPlugin);

    this.filename = opts.filename;
    var ignoreChunkNames = opts.ignoreChunkNames || [];
    this.ignoreChunkNames = Array.isArray(ignoreChunkNames) ? ignoreChunkNames : [ignoreChunkNames];
  }

  ReactChunkPlugin.prototype.apply = function apply(compiler) {
    var _this = this;

    compiler.plugin('emit', function (compilation, callback) {
      var manifest = buildManifest(compiler, compilation, _this.ignoreChunkNames);
      var json = JSON.stringify(manifest, null, 2);
      var outputDirectory = path.dirname(_this.filename);
      try {
        fs.mkdirSync(outputDirectory);
      } catch (err) {
        if (err.code !== 'EEXIST') {
          throw err;
        }
      }
      fs.writeFileSync(_this.filename, json);
      callback();
    });
  };

  return ReactChunkPlugin;
}();

function resolveChunks(manifest, chunkIds) {
  var uniqueIds = chunkIds.reduce(function (uniqueIds, chunkId) {
    if (uniqueIds.indexOf(chunkId) === -1) {
      uniqueIds.push(chunkId);
    }

    return uniqueIds;
  }, []);

  return uniqueIds.reduce(function (bundles, chunkId) {
    return bundles.concat(manifest[chunkId]);
  }, []);
}

exports.ReactChunkPlugin = ReactChunkPlugin;
exports.resolveChunks = resolveChunks;