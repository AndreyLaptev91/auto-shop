'use strict';

exports.__esModule = true;

exports.default = function (_ref) {
  var t = _ref.types;

  return {
    visitor: {
      ImportDeclaration: function ImportDeclaration(path) {
        var source = path.node.source.value;
        if (source !== PKG_NAME) return;

        var importSpecifiers = path.get('specifiers').filter(function (specifier) {
          if (specifier.isImportSpecifier()) {
            return ['chunk', 'chunks'].indexOf(specifier.node.imported.name) !== -1;
          }

          return false;
        });

        if (!importSpecifiers.length) {
          return;
        }

        importSpecifiers.forEach(function (importSpecifier) {
          var bindingName = importSpecifier.node.local.name;
          var binding = path.scope.getBinding(bindingName);

          binding.referencePaths.forEach(function (refPath) {
            var callExpression = refPath.parentPath;
            if (!callExpression.isCallExpression()) {
              return;
            }

            var writableChunkArgs = callExpression.node.arguments;
            if (writableChunkArgs.length === 0) {
              throw callExpression.error; // missing import
            }

            var importStatement = callExpression.get('arguments')[0];

            var userOptions = void 0;
            var propertiesMap = {};
            if (writableChunkArgs.length > 1) {
              userOptions = callExpression.get('arguments')[1];
              if (t.isObjectExpression(userOptions)) {
                userOptions.get('properties').forEach(function (property) {
                  var key = property.get('key');
                  propertiesMap[key.node.name] = property;
                });
              }
            } else {
              userOptions = t.objectExpression([]);
              writableChunkArgs.push(userOptions);
            }

            // webpack options have been manually applied
            if (propertiesMap.webpack) {
              return;
            }

            // identify all import() statements
            var dynamicImports = [];
            importStatement.traverse({
              Import: function Import(path) {
                dynamicImports.push(path.parentPath);
              }
            });

            if (!dynamicImports.length) {
              return;
            }

            var generatedArgs = [];
            generatedArgs.push( // add the prop
            t.objectProperty(t.identifier('webpack'), t.arrowFunctionExpression([], t.arrayExpression(dynamicImports.map(function (dynamicImport) {
              return t.callExpression(t.memberExpression(t.identifier('require'), t.identifier('resolveWeak')), [dynamicImport.get('arguments')[0].node]);
            })))));

            generatedArgs.push( // add the prop
            t.objectProperty(t.identifier('modules'), t.arrayExpression(dynamicImports.map(function (dynamicImport) {
              return dynamicImport.get('arguments')[0].node;
            }))));

            writableChunkArgs.push(t.objectExpression(generatedArgs));
          });
        });
      }
    }
  };
};

var PKG_NAME = 'react-chunk';